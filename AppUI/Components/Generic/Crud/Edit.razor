@using AppUI.Services;
@using AppUI.State;
@using AppUI.Helpers.Enums;
@using AppUI.Helpers.ViewModels;
@using AppUI.Components.Views.Finance;
@using AppUI.Components.Generic.Form;
@using Common.Models.ProductModels.Properties;
@using Common.Response;
@using Common.Enums;
@using Common.Helpers;

@inject PropertiesService Service
@inject StaticDataState StaticDataState
@inject RouterState RouterState;
@inject NavigationManager NavigationManager
@inject UserState UserState;


<div class="main-container">
    <MudPaper Class="pa-8" Width="50%" MinWidth="350px" Elevation="0">
        <MudForm>
            <MudTextField Variant="Variant.Outlined" T="string" Label="Name" Value="@Name" ValueChanged="((e) => Name = e)" />
            <MudTextField Variant="Variant.Outlined" T="double" Label="Value" Value="@Value" ValueChanged="((e) => Value = e)" />
            <CustomSelect CategoryType="@CategoryType" ActiveValue="@Convertor.CategoryIdToString(Category)" OnSelect="OnSelectCategory" />
            <MudSpacer />
            @if (loading == false)
            {
                <MudButton Class="pa-4 mt-3 button" Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" OnClick="(() => UpdateItem())"> Save</MudButton>
            }
            else
            {
                <MudButton Class="pa-4 mt-3 button" Variant="Variant.Filled" Disabled DropShadow="false" Color="Color.Default">
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                </MudButton>
            }

            <MudButton Class="pa-4 mt-3 button" Variant="Variant.Filled" DropShadow="false" Color="Color.Error" OnClick="(() => Cancel.InvokeAsync())">Cancel</MudButton>
        </MudForm>
    </MudPaper>
</div>

@code {
    #region Params
    [Parameter]
    public int ItemId { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public double Value { get; set; }

    [Parameter]
    public int Category { get; set; }

    [Parameter]
    public EventCallback Cancel { get; set; }

    [Parameter]
    public ECategoryType CategoryType { get; set; } = ECategoryType.Properties;

    [Parameter]
    public EItemType UpdateItemType { get; set; }
    #endregion

    private bool loading;

    private async void UpdateItem()
    {
        loading = true;
        BaseResponse<bool> result =
            new()
                {
                    Data = false,
                    Status = Common.Enums.EHttpStatus.INTERNAL_SERVER_ERROR,
                    ResponseMessage = "Something Went Wrong",
                };

        switch (UpdateItemType)
        {
            case EItemType.Property:
                {
                    result = await UpdateProperty();
                    break;
                }
            default: break;
        }

        if (result.Status == Common.Enums.EHttpStatus.OK && result.Data)
        {
            StaticDataState.ResultState = EResult.Success;
            StaticDataState.SuccessMessage = $"Item was sucesfully updated";
        }
        else
        {
            StaticDataState.ResultState = EResult.Error;
            StaticDataState.ErrorMessage = $"Item could not be updated";
        }

        loading = false;
        Redirect();
    }

    private void OnSelectCategory(string categoryValue)
    {
        Category = Convertor.CategoryIdNameToInt(categoryValue, (int)ECategoryType.Properties);
    }

    private async Task<BaseResponse<bool>> UpdateProperty()
    {
        Property property = new()
            {
                Id = ItemId,
                Name = Name,
                Value = Value,
                CategoryId = Category,
                OwnerId = UserState.UserId
            };

        return await Service.UpdateProperty(property);
    }

    private void Redirect()
    {
        RouterState.Params = new RouterParams()
            {
                LinkToPage = "finances",
                LinkToSection = "Majetek",
            };

        NavigationManager.NavigateTo("result");
    }

    private void CheckIfCorrectValuesArePassed()
    {
        //Todo: check if values, based on @UpdateItemType are properly passed in, if not, NavigateToPreviousPage
    }
}
