@using AppUI.State
@using AppUI.Helpers.Enums
@using AppUI.Helpers.ViewModels

@inject RouterState RouterState

@if (@Type == ENavType.Main)
{
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="">AppUI</a>
        </div>
    </div>

    <input type="checkbox" title="Navigation menu" class="navbar-toggler" />

    <div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
        @foreach (var pageName in @RouterState.PageNames)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href=@pageName.Href @onclick="@(e => ChangePageName(e, pageName.Name))">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> @pageName.Name
                </NavLink>
            </div>
        }
    </div>
}
else
{
    <div class="sub-nav">
        <MudButtonGroup Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled" >
            @if (@RouterState.PageName == "Finance")
            {
                @foreach (var subPageName in @financeSubPageNames)
                {
                    <MudButton @onclick="@(e => ChangeSectionName(e, subPageName))">@subPageName</MudButton>
                }
            }
        </MudButtonGroup>
    </div>
}

@code {
    [Parameter]
    public ENavType Type { get; set; } = ENavType.Main;

    private readonly List<string> financeSubPageNames = ["General Overview", "Majetek", "Náklady a dluhy", "Příjmy a úspory", "Rozpočty"];

    protected override void OnInitialized()
    {
        RouterState.OnChange += StateHasChanged;
    }

    private void ChangePageName(MouseEventArgs e, string value)
    {
        RouterState.PageName = value;
    }

    private void ChangeSectionName(MouseEventArgs e, string value)
    {
        RouterState.SectionName = value;
    }

    public void Dispose()
    {
        RouterState.OnChange -= StateHasChanged;
    }
}
